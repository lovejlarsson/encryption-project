for (i in 1:length(namnLista)) {
result[i] <- extract_name(namnLista[i])
date_result[i] <- extract_date(namnLista[i])
}
# Count the occurrences of each name (number of commits)
name_count <- table(result)
# Sort the counts in descending order
sorted_name_count <- sort(name_count, decreasing = TRUE)
# Take the top n contributors
top_contributors <- head(sorted_name_count, n)
# Create a list to store the latest commit date for each contributor
latest_dates <- character(length = length(name_count))
# For each contributor, find the latest date
for (i in 1:length(name_count)) {
contributor <- names(name_count)[i]
# Get the rows corresponding to the current contributor
contributor_rows <- which(result == contributor)
# Get the latest date for this contributor
latest_dates[i] <- max(date_result[contributor_rows])  # Find the most recent date
}
# Create a named vector with contributors and their latest commit dates
latest_dates_named <- setNames(latest_dates, names(name_count))
# Sort by the latest commit date (earliest first)
sorted_dates <- sort(latest_dates_named)
# Create a bar plot of the top n contributors
barplot(top_contributors, main = paste("Top", n, "Contributors"),
col = "skyblue", las = 2,
xlab = "Contributor", ylab = "Number of Commits")
return(sorted_dates)
}
contributors("~/Downloads/newfile.txt", 10)
View(contributors)
contributors("~/Downloads/newfile.txt", 10)
analyzePotentialOutliers <- function(data, threshold){
result <- data.frame(
Variable = character(0), NbrOutliers = numeric(0), MeanNonOutliers = numeric(0))
filtered_data <- list()
for (i in 1:ncol(data)) {
variable_name      <- colnames(data)[i]
current_threshold  <- threshold[i]
column_data        <- sort(data[[i]], decreasing = FALSE)
nbrOutliers <- sum(column_data > current_threshold)
filtered_data[[i]] <- head(column_data, -nbrOutliers)
mean_no_outliers <- ifelse(length(filtered_data[[i]]) > 0, mean(filtered_data[[i]]), NA)
result <- rbind(result, data.frame(Variable = variable_name, NbrOutliers = nbrOutliers, MeanNonOutliers = mean_no_outliers))
}
return result
analyzePotentialOutliers <- function(data, threshold){
result <- data.frame(Variable = character(0), NbrOutliers = numeric(0), MeanNonOutliers = numeric(0))
filtered_data <- list()
for (i in 1:ncol(data)) {
variable_name      <- colnames(data)[i]
current_threshold  <- threshold[i]
column_data        <- sort(data[[i]], decreasing = FALSE)
nbrOutliers <- sum(column_data > current_threshold)
filtered_data[[i]] <- head(column_data, -nbrOutliers)
mean_no_outliers <- ifelse(length(filtered_data[[i]]) > 0, mean(filtered_data[[i]]), NA)
result <- rbind(result, data.frame(Variable = variable_name, NbrOutliers = nbrOutliers, MeanNonOutliers = mean_no_outliers))
}
return result
analyzePotentialOutliers <- function(data, threshold){
result <- data.frame(Variable = character(0), NbrOutliers = numeric(0), MeanNonOutliers = numeric(0))
filtered_data <- list()
for (i in 1:ncol(data)) {
variable_name      <- colnames(data)[i]
current_threshold  <- threshold[i]
column_data        <- sort(data[[i]], decreasing = FALSE)
nbrOutliers <- sum(column_data > current_threshold)
filtered_data[[i]] <- head(column_data, -nbrOutliers)
mean_no_outliers <- ifelse(length(filtered_data[[i]]) > 0, mean(filtered_data[[i]]), NA)
result <- rbind(result, data.frame(Variable = variable_name, NbrOutliers = nbrOutliers, MeanNonOutliers = mean_no_outliers))
}
return result
analyzePotentialOutliers <- function(data, threshold){
result <- data.frame(Variable = character(0), NbrOutliers = numeric(0), MeanNonOutliers = numeric(0))
filtered_data <- list()
for (i in 1:ncol(data)) {
variable_name      <- colnames(data)[i]
current_threshold  <- threshold[i]
column_data        <- sort(data[[i]], decreasing = FALSE)
nbrOutliers <- sum(column_data > current_threshold)
filtered_data[[i]] <- head(column_data, -nbrOutliers)
mean_no_outliers <- ifelse(length(filtered_data[[i]]) > 0, mean(filtered_data[[i]]), NA)
result <- rbind(result, data.frame(Variable = variable_name, NbrOutliers = nbrOutliers, MeanNonOutliers = mean_no_outliers))
}
return result
removeNA <- function(data) {
data <- data[complete.cases(data), ]
}
analyzePotentialOutliers <- function(data, threshold){
result <- data.frame(
Variable = character(0), NbrOutliers = numeric(0), MeanNonOutliers = numeric(0))
filtered_data <- list()
for (i in 1:ncol(data)) {
variable_name      <- colnames(data)[i]
current_threshold  <- threshold[i]
column_data        <- sort(data[[i]], decreasing = FALSE)
nbrOutliers <- sum(column_data > current_threshold)
filtered_data[[i]] <- head(column_data, -nbrOutliers)
mean_no_outliers <- ifelse(length(filtered_data[[i]]) > 0, mean(filtered_data[[i]]), NA)
result <- rbind(result, data.frame(Variable = variable_name, NbrOutliers = nbrOutliers, MeanNonOutliers = mean_no_outliers))
}
return result
analyzePotentialOutliers <- function(data, threshold){
result <- data.frame(
Variable = character(0), NbrOutliers = numeric(0), MeanNonOutliers = numeric(0))
filtered_data <- list()
for (i in 1:ncol(data)) {
variable_name      <- colnames(data)[i]
current_threshold  <- threshold[i]
column_data        <- sort(data[[i]], decreasing = FALSE)
nbrOutliers <- sum(column_data > current_threshold)
filtered_data[[i]] <- head(column_data, -nbrOutliers)
mean_no_outliers <- ifelse(length(filtered_data[[i]]) > 0, mean(filtered_data[[i]]), NA)
result <- rbind(result, data.frame(Variable = variable_name, NbrOutliers = nbrOutliers, MeanNonOutliers = mean_no_outliers))
}
return(result)
}
analyzePotentialOutliers("~/Downloads/data.txt", c(5,5,0))
c <- c(5,5,0)
analyzePotentialOutliers("~/Downloads/data.txt", c)
View(analyzePotentialOutliers)
View(analyzePotentialOutliers)
data <- read.csv("~/Downloads/data.txt", row.names=1, comment.char="#")
labb1 <- read.csv("~/Downloads/data.txt", row.names=1, comment.char="#")
labb1 <- read.csv("~/Downloads/data.txt", comment.char="#")
View(labb1)
bralabb1 <- removeNA(labb1)
analyzePotentialOutliers(bralabb1, c)
View(analyzePotentialOutliers)
View(removeNA)
View(removeNA)
bralabb1 <- removeNA(labb1)
bralabb1
nrow(bralabb1)
analyzePotentialOutliers(bralabb1)
analyzePotentialOutliers(bralabb1, c)
c
contributors(bror, 4)
contributors("~/Downloads/newfile.txt", 4)
EDAA35.labb.3.2025.rapporterad.data...Blad1 <- read.csv("~/Downloads/EDAA35 labb 3 2025 rapporterad data - Blad1.csv")
View(EDAA35.labb.3.2025.rapporterad.data...Blad1)
View(EDAA35.labb.3.2025.rapporterad.data...Blad1)
df <- df[, 1:3]
df <- df[, 1:3]
data <- EDAA35.labb.3.2025.rapporterad.data...Blad1
df <- df[, 1:3]
data <- data[, colSums(is.na(data)) < nrow(data)]
data
newData <- complete.cases(data)
newData
newData <- data[complete.cases(data), ]
newData
boxplot(newData)
boxplot(Value ~ Alternativ..A.B., data = newData,
main = "Boxplot by Category",
col = c("lightblue", "lightpink"),
ylab = "Values",
xlab = "Category")
boxplot(Alternativ..A.B. ~ Category, data = newData,
main = "Boxplot by Category",
col = c("lightblue", "lightpink"),
ylab = "Values",
xlab = "Category")
boxplot(Value ~ Alternativ..A.B., data = newData,
main = "Boxplot by Category (A vs B)",
col = c("lightblue", "lightpink"),
ylab = "Values",
xlab = "Alternativ..A.B.")
colnames(newData)
uppskattad <- boxplot(Estimerad.tid..minuter. ~ Alternativ..A.B., data = newData,
main = "Estimated Time by Category (A vs B)",
col = c("lightblue", "lightpink"),
ylab = "Estimated Time (minutes)",
xlab = "Alternativ (A or B)")
verklig <- boxplot(Verklig.tid..minuter. ~ Alternativ..A.B., data = newData,
main = "Actual Time by Category (A vs B)",
col = c("lightgreen", "lightcoral"),
ylab = "Actual Time (minutes)",
xlab = "Alternativ (A or B)")
View(uppskattad)
uppskattad
View(uppska)
View(uppskattad)
View(uppskattad)
View(uppskattad)
uppskattad <- boxplot(Estimerad.tid..minuter. ~ Alternativ..A.B., data = newData,
main = "Estimated Time by Category (A vs B)",
col = c("lightblue", "lightpink"),
ylab = "Estimated Time (minutes)",
xlab = "Alternativ (A or B)")
View(EDAA35.labb.3.2025.rapporterad.data...Blad1)
t.test(Estimerad.tid..minuter. ~ Alternativ..A.B., data = newData, var.equal = TRUE)
t.test(Verklig.tid..minuter. ~ Alternativ..A.B., data = newData, var.equal = TRUE)
t.test(Verklig.tid..minuter. ~ Alternativ..A.B., data = newData)
t.test(Estimerad.tid..minuter. ~ Alternativ..A.B., data = newData)
# Filtrera ut data för Grupp A
gruppA <- newData[newData$Alternativ..A.B. == "A", ]
# Utför ett parat t-test
resultatA <- t.test(gruppA$Estimerad.tid..minuter.,
gruppA$Verklig.tid..minuter.,
paired = TRUE)
# Visa resultatet
print(resultatA)
# Filtrera ut data för Grupp B
gruppB <- newData[newData$Alternativ..A.B. == "B", ]
# Utför ett parat t-test
resultatB <- t.test(gruppB$Uppskattat_antal,
gruppB$Faktiskt_antal,
paired = TRUE)
# Filtrera ut data för Grupp A
gruppB <- newData[newData$Alternativ..A.B. == "B", ]
# Utför ett parat t-test
resultatB <- t.test(gruppB$Estimerad.tid..minuter.,
gruppB$Verklig.tid..minuter.,
paired = TRUE)
# Visa resultatet
print(resultatB)
# Ladda dplyr-paketet (om du inte redan har gjort det)
library(dplyr)
# För Grupp A
gruppA <- newData[newData$Alternativ..A.B. == "A", ]
within10_A <- (gruppA$Estimerad.tid..minuter. >= 0.9 * gruppA$Verklig.tid..minuter.) &
(gruppA$Estimerad.tid..minuter. <= 1.1 * gruppA$Verklig.tid..minuter.)
prop_A <- mean(within10_A)
# För Grupp B
gruppB <- newData[newData$Alternativ..A.B. == "B", ]
within10_B <- (gruppB$Estimerad.tid..minuter. >= 0.9 * gruppB$Verklig.tid..minuter.) &
(gruppB$Estimerad.tid..minuter. <= 1.1 * gruppB$Verklig.tid..minuter.)
prop_B <- mean(within10_B)
# Skriv ut resultaten
cat("Andel deltagare i Grupp A som uppskattat inom 10%:", round(prop_A * 100, 2), "%\n")
cat("Andel deltagare i Grupp B som uppskattat inom 10%:", round(prop_B * 100, 2), "%\n")
a -> 3
data <- c(15, 15, 13, 15, 12, 11, 15, 13, 17, 24, 16, 18, 15, 4, 16)
boxplot(data)
outliers <- boxplot.stats(data)$out
print(outliers)
mockData <- read.csv("~/programmering/encryption-project/databehandling/mockData.csv", header=FALSE)
View(mockData)
View(mockData)
mockData2 <- read.csv("~/programmering/encryption-project/databehandling/mockData2.csv", header=FALSE)
View(mockData2)
cData <- mockData$V2
javaData <- mockData2$V2
tabell <- data.frame(
c = cData,
java = javaData,
Storst = ifelse(cData > javaData, "c", ifelse(javaData > cData, "java", "Samma")),
Skillnad = abs (cData - javaData)
)
print(tabell)
tabell <- data.frame(
c = cData,
java = javaData,
Storst = ifelse(cData > javaData, "c", ifelse(javaData > cData, "java", "Samma")),
Skillnad = abs (cData - javaData)
)
# Skapa tabellen
tabell <- data.frame(
"C++" = cData,
Java = javaData,
Snabbast = ifelse(cData < javaData, "C++", ifelse(javaData < cData, "Java", "Samma")),
Skillnad = abs(cData - javaData)
)
# Skriv ut tabellen
print(tabell)
# Skapa tabellen
tabell <- data.frame(
"C++" = cData,
"Java" = javaData,
"Snabbast" = ifelse(cData < javaData, "C++", ifelse(javaData < cData, "Java", "Samma")),
Skillnad = abs(cData - javaData)
)
# Skriv ut tabellen
print(tabell)
# Skriptet är nu gjort för bara tidsvärden.
# Kan behöva formulera om datan här uppe om den är "1,234234" (med index)
tabell <- data.frame(
"C+" = cData,
"Java" = javaData,
"Snabbast" = ifelse(cData < javaData, "C++", ifelse(javaData < cData, "Java", "Samma")),
Skillnad = abs(cData - javaData)
)
print(tabell)
cData -> varde1
javaData -> varde2
ata <- data.frame(
Tid = 1:length(varde1),   # x-axeln kan vara tid eller index
Varde1 = varde1,
Varde2 = varde2
)
# Skapa ett punktdiagram
plot(data$Tid, data$Varde1, type="b", col="blue", pch=19, xlab="Tid", ylab="Värde (sek)", main="Jämförelse mellan två värden")
# Stacked Bar Chart
barplot(rbind(varde1, varde2), beside=TRUE, col=c("blue", "red"), names.arg=1:length(varde1),
xlab="Tid", ylab="Värde (sek)", main="Stapeldiagram: Jämförelse mellan Värde1 och Värde2")
legend("topright", legend=c("Värde1", "Värde2"), fill=c("blue", "red"))
data <- data.frame(
Tidsindex = 1:length(varde1),   # x-axeln kan vara tid eller index
Varde1 = varde1,
Varde2 = varde2
)
# Skapa ett punktdiagram
plot(data$Tidsindex, data$Varde1, type="b", col="blue", pch=19, xlab="Tid", ylab="Värde (sek)", main="Jämförelse mellan två värden")
points(data$Tidsindex, data$Varde2, type="b", col="red", pch=19)  # Lägg till Varde2 med röd färg
legend("topright", legend=c("Värde1", "Värde2"), col=c("blue", "red"), pch=19)
# Lägg till linjer som visar skillnaden
for(i in 1:length(varde1)) {
if(varde1[i] > varde2[i]) {
arrows(i, varde2[i], i, varde1[i], col="green", length=0.1)
} else {
arrows(i, varde1[i], i, varde2[i], col="green", length=0.1)
}
}
legend("topright", legend=c("C++", "Java"), col=c("blue", "red"), pch=19)
create_graph <- function(cData, javaData) {
data <- data.frame(
Tidsindex = 1:length(varde1),   # x-axeln kan vara tid eller index
Varde1 = cData,
Varde2 = javaData
)
plot(data$Tidsindex, data$Varde1, type="b", col="blue", pch=19, xlab="Index", ylab="Tid", main="Jämförelse mellan två värden")
points(data$Tidsindex, data$Varde2, type="b", col="red", pch=19)  # Lägg till Varde2 med röd färg
legend("topright", legend=c("C++", "Java"), col=c("blue", "red"), pch=19)
}
create_graph(cData, javaData)
points(data$Tidsindex, data$Varde2, type="p", col="red", pch=19)  # Lägg till Varde2 med röd färg
legend("topright", legend=c("C++", "Java"), col=c("blue", "red"), pch=19)
create_graph <- function(cData, javaData) {
data <- data.frame(
Tidsindex = 1:length(varde1),   # x-axeln kan vara tid eller index
Varde1 = cData,
Varde2 = javaData
)
plot(data$Tidsindex, data$Varde1, type="b", col="blue", pch=19,
xlab="Index", ylab="Tid", main="Jämförelse mellan två värden")
points(data$Tidsindex, data$Varde2, type="p", col="red", pch=19)  # Lägg till Varde2 med röd färg
legend("topright", legend=c("C++", "Java"), col=c("blue", "red"), pch=19)
}
create_graph(cData, javaData)
create_graph()
points(data$Tidsindex, data$Varde2, type="p", col="red", pch=19)
create_graph <- function(cData, javaData) {
data <- data.frame(
Tidsindex = 1:length(varde1),   # x-axeln kan vara tid eller index
Varde1 = cData,
Varde2 = javaData
)
plot(data$Tidsindex, data$Varde1, type="p", col="blue", pch=19,
xlab="Index", ylab="Tid", main="Jämförelse mellan två värden")
points(data$Tidsindex, data$Varde2, type="p", col="red", pch=19)
legend("topright", legend=c("C++", "Java"), col=c("blue", "red"), pch=19)
}
create_graph(cData, javaData)
plot(data$Tidsindex, data$Varde1, type="p", col="blue", pch=19,
xlab="Index", ylab="Tid", main="Jämförelse mellan två värden")
points(data$Tidsindex, data$Varde2, type="o", col="red", pch=19)
create_t_test <- function(cData, javaData) {}
create_t_test <- function(cData, javaData) {
resultat <- t.test(cData, javaData, paired = FALSE)
print(resultat)
}
create_t_test(cData, javaData)
print(resultat)
create_t_test <- function(cData, javaData) {
resultat <- t.test(cData, javaData, paired = TRUE)
print(resultat)
}
create_t_test(cData, javaData)
t.test(cData)
t.test(javaData)
print("Medelvärden: Java - c++ = " + (jMean - cMean))
create_t_test <- function(cData, javaData) {
jResultat <- t.test(javaData)
jMean <- mean(javaData)
cResultat <- t.test(cData)
cMean <- mean(cData)
print(jResultat +" "+ cResultat)
print("Medelvärden: Java - c++ = " + (jMean - cMean))
}
create_t_test(cData, javaData)
cat("Skillnad (Java - C++):", diffMean, "\n")
create_t_test <- function(cData, javaData) {
jResultat <- t.test(javaData)
jMean <- mean(javaData)
cResultat <- t.test(cData)
cMean <- mean(cData)
print("T-test resultat för Java:")
print(jResultat)
print("T-test resultat för C++:")
print(cResultat)
# Jämför medelvärden
diffMean <- jMean - cMean
cat("Medelvärden:\n")
cat("Java:", jMean, "\n")
cat("C++:", cMean, "\n")
cat("Skillnad (Java - C++):", diffMean, "\n")
}
create_t_test(cData, javaData)
setwd("~/programmering/encryption-project")
ny20maj500_10 <- read.csv("~/programmering/encryption-project/cpp!/ny20maj500_10", header=FALSE)
View(ny20maj500_10)
ny20maj500_10$V2 -> c500x10
resultat <- t.test(javaData, cData, paired = TRUE)
jMean <- mean(javaData)
cMean <- mean(cData)
print("T-test")
print(resultat)
# Jämför medelvärden
diffMean <- jMean - cMean
cat("Medelvärden:\n")
cat("Java:", jMean, "\n")
cat("C++:", cMean, "\n")
cat("Skillnad (Java - C++):", diffMean, "\n")
create_t_test <- function(cData, javaData) {
resultat <- t.test(javaData, cData, paired = TRUE)
jMean <- mean(javaData)
cMean <- mean(cData)
print("T-test")
print(resultat)
# Jämför medelvärden
diffMean <- jMean - cMean
cat("Medelvärden:\n")
cat("Java:", jMean, "\n")
cat("C++:", cMean, "\n")
cat("Skillnad (Java - C++):", diffMean, "\n")
}
ny21500_10 <- read.csv("~/programmering/encryption-project/cpp!/ny21500_10", header=FALSE)
View(ny21500_10)
ny21500_10 -> c500x10
ny21500_10$V2 -> c500x10
`21maj500_10` <- read.csv("~/programmering/encryption-project/java/outputJava/21maj500_10", header=FALSE)
View(`21maj500_10`)
`21maj500_10`$V2 -> j500x10
create_t_test(c500x10, j500x10)
create_t_test <- function(cData, javaData) {
resultat <- t.test(javaData, cData, paired = TRUE)
jMean <- mean(javaData)
cMean <- mean(cData)
print("T-test")
print(resultat)
# Jämför medelvärden
diffMean <- jMean - cMean
cat("Medelvärden:\n")
cat("Java:", jMean, "\n")
cat("C++:", cMean, "\n")
cat("Skillnad (Java - C++):", diffMean, "\n")
}
create_graph <- function(cData, javaData, titel) {
data <- data.frame(
Tidsindex = 1:length(cData),   # x-axeln kan vara tid eller index
Varde1 = cData,
Varde2 = javaData
)
# types:
# l -> bara linje
# p -> bara punkt
# b -> both, linjer först (inte så clean)
# o -> punkt + linje, punkt över linje
# dynamisk y-axel
yMin <- min(c(cData, javaData))
yMax <- max(c(cData, javaData))
plot(data$Tidsindex, data$Varde1, type="l", col="blue", pch=19,
xlab="Index", ylab="Tid", main=titel, ylim=c(yMin, yMax), log = "y")
points(data$Tidsindex, data$Varde2, type="l", col="red", pch=19)
legend("topright", legend=c("C++", "Java"), col=c("blue", "red"), pch=19)
}
create_t_test(c500x10, c500x10)
create_t_test(c500x10, j500x10)
ny21500_10 <- read.csv("~/programmering/encryption-project/cpp!/ny21500_10", header=FALSE)
View(ny21500_10)
ny21500_10$V2 -> c500x10
`21maj500_10` <- read.csv("~/programmering/encryption-project/java/outputJava/21maj500_10", header=FALSE)
View(`21maj500_10`)
`21maj500_10`$V2 -> j500x10
create_t_test <- function(cData, javaData) {
resultat <- t.test(javaData, cData, paired = TRUE)
jMean <- mean(javaData)
cMean <- mean(cData)
print("T-test")
print(resultat)
# Jämför medelvärden
diffMean <- jMean - cMean
cat("Medelvärden:\n")
cat("Java:", jMean, "\n")
cat("C++:", cMean, "\n")
cat("Skillnad (Java - C++):", diffMean, "\n")
}
creatt
create_t_test(c500x10, j500x10)
create_graph <- function(cData, javaData, titel) {
data <- data.frame(
Tidsindex = 1:length(cData),   # x-axeln kan vara tid eller index
Varde1 = cData,
Varde2 = javaData
)
# types:
# l -> bara linje
# p -> bara punkt
# b -> both, linjer först (inte så clean)
# o -> punkt + linje, punkt över linje
# dynamisk y-axel
yMin <- min(c(cData, javaData))
yMax <- max(c(cData, javaData))
plot(data$Tidsindex, data$Varde1, type="l", col="blue", pch=19,
xlab="Index", ylab="Tid", main=titel, ylim=c(yMin, yMax), log = "y")
points(data$Tidsindex, data$Varde2, type="l", col="red", pch=19)
legend("topright", legend=c("C++", "Java"), col=c("blue", "red"), pch=19)
}
create_graph(c500x10, j500x10)
create_graph(c500x10, j500x10, "Ordlängd 10, 500 ord")

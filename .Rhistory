prop_B <- mean(within10_B)
# Skriv ut resultaten
cat("Andel deltagare i Grupp A som uppskattat inom 10%:", round(prop_A * 100, 2), "%\n")
cat("Andel deltagare i Grupp B som uppskattat inom 10%:", round(prop_B * 100, 2), "%\n")
a -> 3
data <- c(15, 15, 13, 15, 12, 11, 15, 13, 17, 24, 16, 18, 15, 4, 16)
boxplot(data)
outliers <- boxplot.stats(data)$out
print(outliers)
mockData <- read.csv("~/programmering/encryption-project/databehandling/mockData.csv", header=FALSE)
View(mockData)
View(mockData)
mockData2 <- read.csv("~/programmering/encryption-project/databehandling/mockData2.csv", header=FALSE)
View(mockData2)
cData <- mockData$V2
javaData <- mockData2$V2
tabell <- data.frame(
c = cData,
java = javaData,
Storst = ifelse(cData > javaData, "c", ifelse(javaData > cData, "java", "Samma")),
Skillnad = abs (cData - javaData)
)
print(tabell)
tabell <- data.frame(
c = cData,
java = javaData,
Storst = ifelse(cData > javaData, "c", ifelse(javaData > cData, "java", "Samma")),
Skillnad = abs (cData - javaData)
)
# Skapa tabellen
tabell <- data.frame(
"C++" = cData,
Java = javaData,
Snabbast = ifelse(cData < javaData, "C++", ifelse(javaData < cData, "Java", "Samma")),
Skillnad = abs(cData - javaData)
)
# Skriv ut tabellen
print(tabell)
# Skapa tabellen
tabell <- data.frame(
"C++" = cData,
"Java" = javaData,
"Snabbast" = ifelse(cData < javaData, "C++", ifelse(javaData < cData, "Java", "Samma")),
Skillnad = abs(cData - javaData)
)
# Skriv ut tabellen
print(tabell)
# Skriptet är nu gjort för bara tidsvärden.
# Kan behöva formulera om datan här uppe om den är "1,234234" (med index)
tabell <- data.frame(
"C+" = cData,
"Java" = javaData,
"Snabbast" = ifelse(cData < javaData, "C++", ifelse(javaData < cData, "Java", "Samma")),
Skillnad = abs(cData - javaData)
)
print(tabell)
cData -> varde1
javaData -> varde2
ata <- data.frame(
Tid = 1:length(varde1),   # x-axeln kan vara tid eller index
Varde1 = varde1,
Varde2 = varde2
)
# Skapa ett punktdiagram
plot(data$Tid, data$Varde1, type="b", col="blue", pch=19, xlab="Tid", ylab="Värde (sek)", main="Jämförelse mellan två värden")
# Stacked Bar Chart
barplot(rbind(varde1, varde2), beside=TRUE, col=c("blue", "red"), names.arg=1:length(varde1),
xlab="Tid", ylab="Värde (sek)", main="Stapeldiagram: Jämförelse mellan Värde1 och Värde2")
legend("topright", legend=c("Värde1", "Värde2"), fill=c("blue", "red"))
data <- data.frame(
Tidsindex = 1:length(varde1),   # x-axeln kan vara tid eller index
Varde1 = varde1,
Varde2 = varde2
)
# Skapa ett punktdiagram
plot(data$Tidsindex, data$Varde1, type="b", col="blue", pch=19, xlab="Tid", ylab="Värde (sek)", main="Jämförelse mellan två värden")
points(data$Tidsindex, data$Varde2, type="b", col="red", pch=19)  # Lägg till Varde2 med röd färg
legend("topright", legend=c("Värde1", "Värde2"), col=c("blue", "red"), pch=19)
# Lägg till linjer som visar skillnaden
for(i in 1:length(varde1)) {
if(varde1[i] > varde2[i]) {
arrows(i, varde2[i], i, varde1[i], col="green", length=0.1)
} else {
arrows(i, varde1[i], i, varde2[i], col="green", length=0.1)
}
}
legend("topright", legend=c("C++", "Java"), col=c("blue", "red"), pch=19)
create_graph <- function(cData, javaData) {
data <- data.frame(
Tidsindex = 1:length(varde1),   # x-axeln kan vara tid eller index
Varde1 = cData,
Varde2 = javaData
)
plot(data$Tidsindex, data$Varde1, type="b", col="blue", pch=19, xlab="Index", ylab="Tid", main="Jämförelse mellan två värden")
points(data$Tidsindex, data$Varde2, type="b", col="red", pch=19)  # Lägg till Varde2 med röd färg
legend("topright", legend=c("C++", "Java"), col=c("blue", "red"), pch=19)
}
create_graph(cData, javaData)
points(data$Tidsindex, data$Varde2, type="p", col="red", pch=19)  # Lägg till Varde2 med röd färg
legend("topright", legend=c("C++", "Java"), col=c("blue", "red"), pch=19)
create_graph <- function(cData, javaData) {
data <- data.frame(
Tidsindex = 1:length(varde1),   # x-axeln kan vara tid eller index
Varde1 = cData,
Varde2 = javaData
)
plot(data$Tidsindex, data$Varde1, type="b", col="blue", pch=19,
xlab="Index", ylab="Tid", main="Jämförelse mellan två värden")
points(data$Tidsindex, data$Varde2, type="p", col="red", pch=19)  # Lägg till Varde2 med röd färg
legend("topright", legend=c("C++", "Java"), col=c("blue", "red"), pch=19)
}
create_graph(cData, javaData)
create_graph()
points(data$Tidsindex, data$Varde2, type="p", col="red", pch=19)
create_graph <- function(cData, javaData) {
data <- data.frame(
Tidsindex = 1:length(varde1),   # x-axeln kan vara tid eller index
Varde1 = cData,
Varde2 = javaData
)
plot(data$Tidsindex, data$Varde1, type="p", col="blue", pch=19,
xlab="Index", ylab="Tid", main="Jämförelse mellan två värden")
points(data$Tidsindex, data$Varde2, type="p", col="red", pch=19)
legend("topright", legend=c("C++", "Java"), col=c("blue", "red"), pch=19)
}
create_graph(cData, javaData)
plot(data$Tidsindex, data$Varde1, type="p", col="blue", pch=19,
xlab="Index", ylab="Tid", main="Jämförelse mellan två värden")
points(data$Tidsindex, data$Varde2, type="o", col="red", pch=19)
create_t_test <- function(cData, javaData) {}
create_t_test <- function(cData, javaData) {
resultat <- t.test(cData, javaData, paired = FALSE)
print(resultat)
}
create_t_test(cData, javaData)
print(resultat)
create_t_test <- function(cData, javaData) {
resultat <- t.test(cData, javaData, paired = TRUE)
print(resultat)
}
create_t_test(cData, javaData)
t.test(cData)
t.test(javaData)
print("Medelvärden: Java - c++ = " + (jMean - cMean))
create_t_test <- function(cData, javaData) {
jResultat <- t.test(javaData)
jMean <- mean(javaData)
cResultat <- t.test(cData)
cMean <- mean(cData)
print(jResultat +" "+ cResultat)
print("Medelvärden: Java - c++ = " + (jMean - cMean))
}
create_t_test(cData, javaData)
cat("Skillnad (Java - C++):", diffMean, "\n")
create_t_test <- function(cData, javaData) {
jResultat <- t.test(javaData)
jMean <- mean(javaData)
cResultat <- t.test(cData)
cMean <- mean(cData)
print("T-test resultat för Java:")
print(jResultat)
print("T-test resultat för C++:")
print(cResultat)
# Jämför medelvärden
diffMean <- jMean - cMean
cat("Medelvärden:\n")
cat("Java:", jMean, "\n")
cat("C++:", cMean, "\n")
cat("Skillnad (Java - C++):", diffMean, "\n")
}
create_t_test(cData, javaData)
j_10000ord_10längd_res <- read.csv("~/programmering/encryption-project/java/outputJava/res_utanSnit/java_10000ord_10längd_res", header=FALSE)
View(j_10000ord_10längd_res)
setwd("~/programmering/encryption-project")
c_10000ord_10längd_res <- read.csv("~/programmering/encryption-project/cpp!/res_utanSnitTid/10000ord_10längd_res", header=FALSE)
View(c_10000ord_10längd_res)
View(c_10000ord_10längd_res)
jsnitt_10000ord_10längd_res <- read.csv("~/programmering/encryption-project/java/outputJava/res_snitTid/java_st_10000ord_10längd_res", header=FALSE)
View(jsnitt_10000ord_10längd_res)
outputJava <- read.csv("~/programmering/encryption-project/java/outputJava/outputJava.10000_10ns", header=FALSE)
View(outputJava)
c10k10 <- read.csv("~/programmering/encryption-project/cpp!/res_vidSnitTid/10000ord_10längd_res", header=FALSE)
View(c10k10)
View(outputJava)
View(outputJava)
# Skriptet är nu gjort för bara tidsvärden.
# Kan behöva formulera om datan här uppe om den är "1,234234" (med index)
# Borde vi enbart ta java-resultat i jämviktsläget?
tabell <- data.frame(
"C+" = cData,
"Java" = javaData,
"Snabbast" = ifelse(cData < javaData, "C++", ifelse(javaData < cData, "Java", "Samma")),
Skillnad = abs(cData - javaData)
)
print(tabell)
return(tabell)
create_comparison_table <- function(cData, javaData) {
# Skriptet är nu gjort för bara tidsvärden.
# Kan behöva formulera om datan här uppe om den är "1,234234" (med index)
# Borde vi enbart ta java-resultat i jämviktsläget?
tabell <- data.frame(
"C+" = cData,
"Java" = javaData,
"Snabbast" = ifelse(cData < javaData, "C++", ifelse(javaData < cData, "Java", "Samma")),
Skillnad = abs(cData - javaData)
)
print(tabell)
return(tabell)
}
create_graph <- function(cData, javaData) {
data <- data.frame(
Tidsindex = 1:length(varde1),   # x-axeln kan vara tid eller index
Varde1 = cData,
Varde2 = javaData
)
# types:
# l -> bara linje
# p -> bara punkt
# b -> both, linjer först (inte så clean)
# o -> punkt + linje, punkt över linje
plot(data$Tidsindex, data$Varde1, type="p", col="blue", pch=19,
xlab="Index", ylab="Tid", main="Jämförelse mellan två värden")
points(data$Tidsindex, data$Varde2, type="o", col="red", pch=19)
legend("topright", legend=c("C++", "Java"), col=c("blue", "red"), pch=19)
}
create_t_test <- function(cData, javaData) {
jResultat <- t.test(javaData)
jMean <- mean(javaData)
cResultat <- t.test(cData)
cMean <- mean(cData)
print("T-test för Java:")
print(jResultat)
print("T-test för C++:")
print(cResultat)
# Jämför medelvärden
diffMean <- jMean - cMean
cat("Medelvärden:\n")
cat("Java:", jMean, "\n")
cat("C++:", cMean, "\n")
cat("Skillnad (Java - C++):", diffMean, "\n")
}
create_graph(c10k10, outputJava)
cp10k10 <- c10k10$V2
j10k10 <- outputJava$V2
create_graph(cp10k10, j10k10)
data <- data.frame(
Tidsindex = 1:length(cData),   # x-axeln kan vara tid eller index
Varde1 = cData,
Varde2 = javaData
)
plot(data$Tidsindex, data$Varde1, type="p", col="blue", pch=19,
xlab="Index", ylab="Tid", main="Jämförelse mellan två värden")
points(data$Tidsindex, data$Varde2, type="o", col="red", pch=19)
legend("topright", legend=c("C++", "Java"), col=c("blue", "red"), pch=19)
create_graph <- function(cData, javaData) {
data <- data.frame(
Tidsindex = 1:length(cData),   # x-axeln kan vara tid eller index
Varde1 = cData,
Varde2 = javaData
)
# types:
# l -> bara linje
# p -> bara punkt
# b -> both, linjer först (inte så clean)
# o -> punkt + linje, punkt över linje
plot(data$Tidsindex, data$Varde1, type="p", col="blue", pch=19,
xlab="Index", ylab="Tid", main="Jämförelse mellan två värden")
points(data$Tidsindex, data$Varde2, type="o", col="red", pch=19)
legend("topright", legend=c("C++", "Java"), col=c("blue", "red"), pch=19)
}
create_t_test <- function(cData, javaData) {
jResultat <- t.test(javaData)
jMean <- mean(javaData)
cResultat <- t.test(cData)
cMean <- mean(cData)
print("T-test för Java:")
print(jResultat)
print("T-test för C++:")
print(cResultat)
# Jämför medelvärden
diffMean <- jMean - cMean
cat("Medelvärden:\n")
cat("Java:", jMean, "\n")
cat("C++:", cMean, "\n")
cat("Skillnad (Java - C++):", diffMean, "\n")
}
create_graph(cp10k10, j10k10)
create_comparison_table(cp10k10, j10k10)
create_t_test(cp10k10, j10k10)
print(resultat)
# Jämför medelvärden
diffMean <- jMean - cMean
cat("Medelvärden:\n")
cat("Java:", jMean, "\n")
cat("C++:", cMean, "\n")
cat("Skillnad (Java - C++):", diffMean, "\n")
create_t_test <- function(cData, javaData) {
resultat <- t.test(javaData, cData, paired = TRUE)
jMean <- mean(javaData)
cMean <- mean(cData)
print("T-test")
print(resultat)
# Jämför medelvärden
diffMean <- jMean - cMean
cat("Medelvärden:\n")
cat("Java:", jMean, "\n")
cat("C++:", cMean, "\n")
cat("Skillnad (Java - C++):", diffMean, "\n")
}
create_t_test(cp10k10, j10k10)
data <- data.frame(
Tidsindex = 1:length(cData),   # x-axeln kan vara tid eller index
Varde1 = cData,
Varde2 = javaData
)
create_graph <- function(cData, javaData) {
data <- data.frame(
Tidsindex = 1:length(cData),   # x-axeln kan vara tid eller index
Varde1 = cData,
Varde2 = javaData
)
# types:
# l -> bara linje
# p -> bara punkt
# b -> both, linjer först (inte så clean)
# o -> punkt + linje, punkt över linje
plot(data$Tidsindex, data$Varde1, type="o", col="blue", pch=19,
xlab="Index", ylab="Tid", main="Jämförelse av krypteringstid")
points(data$Tidsindex, data$Varde2, type="o", col="red", pch=19)
legend("topright", legend=c("C++", "Java"), col=c("blue", "red"), pch=19)
}
create_graph(cp10k10, j10k10)
create_graph <- function(cData, javaData) {
data <- data.frame(
Tidsindex = 1:length(cData),   # x-axeln kan vara tid eller index
Varde1 = cData,
Varde2 = javaData
)
# types:
# l -> bara linje
# p -> bara punkt
# b -> both, linjer först (inte så clean)
# o -> punkt + linje, punkt över linje
# dynamisk y-axel
yMin <- min(c(cData, javaData))
yMax <- max(c(cData, javaData))
plot(data$Tidsindex, data$Varde1, type="o", col="blue", pch=19,
xlab="Index", ylab="Tid", main="Jämförelse av krypteringstid", ylim=c(yMin, yMax))
points(data$Tidsindex, data$Varde2, type="o", col="red", pch=19)
legend("topright", legend=c("C++", "Java"), col=c("blue", "red"), pch=19)
}
create_graph(cp10k10, j10k10)
`10000_10ny` <- read.csv("~/programmering/encryption-project/cpp!/11majNy/10000_10ny", header=FALSE)
View(`10000_10ny`)
outputJava <- read.csv("~/programmering/encryption-project/java/outputJava/outputJava.10000_10ns", header=FALSE)
View(outputJava)
`10000_10ny`$V2 -> c10k10
outputJava$V2 -> j10k10
# dynamisk y-axel
yMin <- min(c(cData, javaData))
yMax <- max(c(cData, javaData))
plot(data$Tidsindex, data$Varde1, type="o", col="blue", pch=19,
xlab="Index", ylab="Tid", main="Jämförelse av krypteringstid", ylim=c(yMin, yMax))
points(data$Tidsindex, data$Varde2, type="o", col="red", pch=19)
legend("topright", legend=c("C++", "Java"), col=c("blue", "red"), pch=19)
create_graph <- function(cData, javaData) {
data <- data.frame(
Tidsindex = 1:length(cData),   # x-axeln kan vara tid eller index
Varde1 = cData,
Varde2 = javaData
)
# types:
# l -> bara linje
# p -> bara punkt
# b -> both, linjer först (inte så clean)
# o -> punkt + linje, punkt över linje
# dynamisk y-axel
yMin <- min(c(cData, javaData))
yMax <- max(c(cData, javaData))
plot(data$Tidsindex, data$Varde1, type="o", col="blue", pch=19,
xlab="Index", ylab="Tid", main="Jämförelse av krypteringstid", ylim=c(yMin, yMax))
points(data$Tidsindex, data$Varde2, type="o", col="red", pch=19)
legend("topright", legend=c("C++", "Java"), col=c("blue", "red"), pch=19)
}
create_t_test <- function(cData, javaData) {
resultat <- t.test(javaData, cData, paired = TRUE)
jMean <- mean(javaData)
cMean <- mean(cData)
print("T-test")
print(resultat)
# Jämför medelvärden
diffMean <- jMean - cMean
cat("Medelvärden:\n")
cat("Java:", jMean, "\n")
cat("C++:", cMean, "\n")
cat("Skillnad (Java - C++):", diffMean, "\n")
}
create_graph(c10k10, j10k10)
create_t_test(c10k10, j10k10)
create_graph <- function(cData, javaData, titel) {
data <- data.frame(
Tidsindex = 1:length(cData),   # x-axeln kan vara tid eller index
Varde1 = cData,
Varde2 = javaData
)
# types:
# l -> bara linje
# p -> bara punkt
# b -> both, linjer först (inte så clean)
# o -> punkt + linje, punkt över linje
# dynamisk y-axel
yMin <- min(c(cData, javaData))
yMax <- max(c(cData, javaData))
plot(data$Tidsindex, data$Varde1, type="o", col="blue", pch=19,
xlab="Index", ylab="Tid", main=titel, ylim=c(yMin, yMax))
points(data$Tidsindex, data$Varde2, type="o", col="red", pch=19)
legend("topright", legend=c("C++", "Java"), col=c("blue", "red"), pch=19)
}
create_graph(c10k10, j10k10, "Ordlängd 10, 10000 ord")
`10000_5ny` <- read.csv("~/programmering/encryption-project/cpp!/11majNy/10000_5ny", header=FALSE)
View(`10000_5ny`)
`10000_5ny` -> c10k5
outputJava10k5 <- read.csv("~/programmering/encryption-project/java/outputJava/outputJava.10000_5ns", header=FALSE)
View(outputJava10k5)
outputJava10k5 -> j10k5
outputJava10k5$V2 -> j10k5
`10000_5ny`$V2 -> c10k5
create_graph(c10k5, j10k5, "Ordlängd 5, 10000 ord")
create_graph <- function(cData, javaData, titel) {
data <- data.frame(
Tidsindex = 1:length(cData),   # x-axeln kan vara tid eller index
Varde1 = cData,
Varde2 = javaData
)
# types:
# l -> bara linje
# p -> bara punkt
# b -> both, linjer först (inte så clean)
# o -> punkt + linje, punkt över linje
# dynamisk y-axel
yMin <- min(c(cData, javaData))
yMax <- max(c(cData, javaData))
plot(data$Tidsindex, data$Varde1, type="o", col="blue", pch=19,
xlab="Index", ylab="Tid", main=titel, ylim=c(yMin, yMax), log = "y")
points(data$Tidsindex, data$Varde2, type="o", col="red", pch=19)
legend("topright", legend=c("C++", "Java"), col=c("blue", "red"), pch=19)
}
create_graph(c10k5, j10k5, "Ordlängd 5, 10000 ord")
create_graph <- function(cData, javaData, titel) {
data <- data.frame(
Tidsindex = 1:length(cData),   # x-axeln kan vara tid eller index
Varde1 = cData,
Varde2 = javaData
)
# types:
# l -> bara linje
# p -> bara punkt
# b -> both, linjer först (inte så clean)
# o -> punkt + linje, punkt över linje
# dynamisk y-axel
yMin <- min(c(cData, javaData))
yMax <- max(c(cData, javaData))
plot(data$Tidsindex, data$Varde1, type="l", col="blue", pch=19,
xlab="Index", ylab="Tid", main=titel, ylim=c(yMin, yMax), log = "y")
points(data$Tidsindex, data$Varde2, type="l", col="red", pch=19)
legend("topright", legend=c("C++", "Java"), col=c("blue", "red"), pch=19)
}
create_graph(c10k5, j10k5, "Ordlängd 5, 10000 ord")
create_graph(c10k10, j10k10, "Ordlängd 10, 10000 ord")
`1000_10ny` <- read.csv("~/programmering/encryption-project/cpp!/11majNy/1000_10ny", header=FALSE)
View(`1000_10ny`)
`1000_10ny`$V2 -> c1k10
outputJava <- read.csv("~/programmering/encryption-project/java/outputJava/outputJava.1000_10ns", header=FALSE)
View(outputJava)
outputJava -> j1k10
outputJava$V2 -> j1k10
create_graph(c1k10, j1k10, Ordlängd 10, 1000 ord)
create_graph(c1k10, j1k10, "Ordlängd 10, 1000 ord")
`1000_5ny` <- read.csv("~/programmering/encryption-project/cpp!/11majNy/1000_5ny", header=FALSE)
View(`1000_5ny`)
`1000_5ny`$V2 -> c1k5
`5outputJava` <- read.csv("~/programmering/encryption-project/java/outputJava/outputJava.1000_5ns", header=FALSE)
View(`5outputJava`)
`5outputJava`$V2 -> j1k5
create_graph(c1k5, j1k5, Ordlängd 5, 1000 ord)
create_graph(c1k5, j1k5, "Ordlängd 5, 1000 ord")
`500x10` <- read.csv("~/programmering/encryption-project/cpp!/11majNy/11majNy.500_10ny", header=FALSE)
View(`500x10`)
`500x10` -> c500x10
`500x10outputJava` <- read.csv("~/programmering/encryption-project/java/outputJava/outputJava.500_10ns", header=FALSE)
View(`500x10outputJava`)
`500x10outputJava` -> j500x10
create_graph(c500x10, j500x10, "Ordlängd 10, 500 ord")
`500x10outputJava`$V2 -> j500x10
create_graph(c500x10, j500x10, "Ordlängd 10, 500 ord")
`500x10outputJava`$V2 -> j500x10
c500x10
c500x10$V2 -> c500x10
create_graph(c500x10, j500x10, "Ordlängd 10, 500 ord")
`500x511majNy` <- read.csv("~/programmering/encryption-project/cpp!/11majNy/11majNy.500_5ny", header=FALSE)
View(`500x511majNy`)
`500x511majNy`$V2 -> c500x5
`5x500outputJava` <- read.csv("~/programmering/encryption-project/java/outputJava/outputJava.500_5ns", header=FALSE)
View(`5x500outputJava`)
`5x500outputJava`$V2 -> j500x5
create_graph(c500x5, j500x5, "Ordlängd 5, 500 ord")
create_t_test(c10k10, j10k10)
create_t_test(c10k5, j10k5)
create_t_test(c1k5, j1k5)
create_t_test(c1k10, j1k10)
create_t_test(c500x10, j500x10)
create_t_test(c500x5, j500x5)
